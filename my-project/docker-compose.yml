version: '3.8'

services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: pando-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: pando
      POSTGRES_USER: pando
      POSTGRES_PASSWORD: pando123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - opendeepwiki-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U opendeepwiki"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: pando-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - opendeepwiki-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Code Service API 服务
  code-service:
    build:
      context: ./code-service
      dockerfile: Dockerfile
    container_name: pando-code-service
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://pando:pando123@postgres:5432/pando
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-secret-key-here
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    volumes:
      - ./code-service:/app
      - backend_logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - opendeepwiki-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Website 服务
  website:
    build:
      context: ./website
      dockerfile: Dockerfile
    container_name: pando-website
    restart: unless-stopped
    environment:
      - VITE_API_BASE_URL=http://code-service:8000/api/v1
    volumes:
      - ./website:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - code-service
    networks:
      - opendeepwiki-network

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: pando-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - website
      - code-service
    networks:
      - opendeepwiki-network

  # Celery Worker (可选)
  celery-worker:
    build:
      context: ./code-service
      dockerfile: Dockerfile
    container_name: pando-celery-worker
    restart: unless-stopped
    command: celery -A app.celery worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://pando:pando123@postgres:5432/pando
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./code-service:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - opendeepwiki-network

  # Celery Beat (可选)
  celery-beat:
    build:
      context: ./code-service
      dockerfile: Dockerfile
    container_name: pando-celery-beat
    restart: unless-stopped
    command: celery -A app.celery beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://pando:pando123@postgres:5432/pando
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./code-service:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - opendeepwiki-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local

networks:
  pando-network:
    driver: bridge 